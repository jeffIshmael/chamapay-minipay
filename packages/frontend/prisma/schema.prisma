generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
}

model User {
  id            Int            @id @default(autoincrement())
  address       String         @unique
  name          String?
  role          String
  createdChamas Chama[]        @relation("AdminChamas")
  chamas        ChamaMember[]
  joinRequests  ChamaRequest[]
  notifications Notification[]
  payments      Payment[]
  messages      Message[]      // Added relation to Message
  payOuts       PayOut[]
}

model Chama {
  id            Int           @id @default(autoincrement())
  name          String
  slug          String        @unique
  type          String
  startDate     DateTime
  payDate       DateTime
  cycleTime     Int
  started       Boolean       @default(false)
  amount        BigInt
  round         Int
  cycle         Int
  maxNo         Int
  blockchainId  String
  adminId       Int
  payOutOrder   String?  // Json string of payout order array.
  createdAt     DateTime      @default(now())
  admin         User          @relation("AdminChamas", fields: [adminId], references: [id])
  members       ChamaMember[]
  requests      ChamaRequest[]
  notifications Notification[]
  payments      Payment[]
  messages      Message[]     // Added relation to Message
  payOuts       PayOut[]
}

model ChamaMember {
  id      Int   @id @default(autoincrement())
  userId  Int
  chamaId Int
  chama   Chama @relation(fields: [chamaId], references: [id])
  user    User  @relation(fields: [userId], references: [id])
  payDate         DateTime // To track the payment rotation date
}

model Payment {
  id      Int      @id @default(autoincrement())
  amount  BigInt
  description String?
  doneAt  DateTime @default(now())
  txHash  String
  userId  Int
  chamaId Int
  chama   Chama    @relation(fields: [chamaId], references: [id])
  user    User     @relation(fields: [userId], references: [id])
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  senderId  Int
  requestId Int
  userId    Int
  chamaId   Int?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  chama     Chama?   @relation(fields: [chamaId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model ChamaRequest {
  id        Int      @id @default(autoincrement())
  status    String   @default("pending")
  createdAt DateTime @default(now())
  userId    Int
  chamaId   Int
  chama     Chama    @relation(fields: [chamaId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Message {
  id        Int      @id @default(autoincrement())
  chama     Chama    @relation(fields: [chamaId], references: [id])
  chamaId   Int
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  Int
  text      String
  timestamp DateTime @default(now())
}

model PayOut {
  id Int @id @default(autoincrement())
  amount  BigInt
  doneAt  DateTime @default(now())
  txHash  String?
  receiver String
  userId  Int
  chamaId Int
  chama   Chama    @relation(fields: [chamaId], references: [id])
  user    User     @relation(fields: [userId], references: [id])
}

